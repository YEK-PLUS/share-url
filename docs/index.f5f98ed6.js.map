{"mappings":";;;;;GAMmCA,EAE3B,SAAiBC,GACvB,IAAIC,EAAY,CACdC,SAAc,8CACdC,QAAc,6BACdC,UAAc,4CACdC,OAAc,gCACdC,SAAc,+CACdC,SAAc,iCACdC,SAAc,2BAGhB,MAAO,CACLC,QAAc,QACdP,SAAcA,EACdC,QAAcA,EACdC,UAAcA,EACdC,OAAcA,EACdC,SAAcA,EACdC,SAAcA,EACdC,SAAcA,EACdE,MAAcA,GAGhB,SAASC,EAAmBC,GAC1B,OAAOC,OAAOC,KAAKF,GAAQ,IAAIG,KAAI,SAASC,GAC1C,OAAOA,EAAe,IAAMC,mBAAmBL,EAAKI,OACnDE,KAAK,KAQV,SAAShB,EAASU,GAChB,OAAOX,EAAUC,SAAWS,EAAmBC,GAQjD,SAASL,EAASK,GAChB,OAAOX,EAAUM,SAAWI,EAAmBC,GASjD,SAASJ,EAASI,GAChB,OAAOX,EAAUO,SAAWG,EAAmBC,GAcjD,SAAST,EAAQS,GACf,OAAOX,EAAUE,QAAUQ,EAAmBC,GAWhD,SAASR,EAAUQ,GACjB,OAAOX,EAAUG,UAAYO,EAAmBC,GAWlD,SAASP,EAAOO,GACd,OAAOX,EAAUI,OAASM,EAAmBC,GAS/C,SAASN,EAASM,GAChB,OAAOX,EAAUK,SAAWK,EAAmBC,GAajD,SAASF,EAAME,GACb,IAAIO,EAAKP,EAAKO,UACPP,EAAKO,GACZ,IAAIC,EAAST,EAAmBC,GAChC,MAAO,WAAaQ,EAAOC,OAAUF,EAAK,IAAMC,EAAUD,IA1HVG,GCJpDC,QAAQC,IAAIC,EAAA1B,IACZ2B,OAAOC,SAAWF,EAAA1B,GAElB,MAAM6B,EAAIC,SAASC,cAAcC,KAAKF,UAChCG,EAAY,GAElBA,EAAUC,KAAOL,EAAE,uBACnBI,EAAUE,SAAWN,EAAE,qBAEvBI,EAAUG,QAAU,CAClB,CACEC,GAAIR,EAAE,iCACNS,OAAQtC,EAAAG,SACRoC,QAAUC,IAAU,CAAEC,EAAGD,EAAKC,KAEhC,CACEJ,GAAIR,EAAE,iCACNS,OAAQtC,EAAAQ,SACR+B,QAAUC,IAAU,CAAEE,KAAMF,EAAKE,QAEnC,CACEL,GAAIR,EAAE,gCACNS,OAAQtC,EAAAI,SAEV,CACEiC,GAAIR,EAAE,iCACNS,OAAQtC,EAAAS,UAEV,CACE4B,GAAIR,EAAE,kCACNS,OAAQtC,EAAAK,WAEV,CACEgC,GAAIR,EAAE,+BACNS,OAAQtC,EAAAM,QAEV,CACE+B,GAAIR,EAAE,iCACNS,OAAQtC,EAAAO,WAIZ0B,EAAUU,QAAWC,GAAQ,GAAGA,cAAgBA,wDAEhDX,EAAUY,cAAiBC,IACzB,MAAML,EAAIG,IAAMF,KAAOI,EAEvBb,EAAUG,QAAQW,SAASC,IACzBA,EAAEX,GAAGY,UAAYhB,EAAUU,QACzBK,EAAEV,OACAU,EAAET,QAAUS,EAAET,QAAQ,CApD9BE,EAoDgCA,EApDhCG,IAoDmCA,IApDnCF,KAoDwCA,OAAU,CApDlDE,IAoDoDA,WAMpDX,EAAUC,MAAMgB,iBAAiB,UAAWC,IAC1CA,EAAGC,iBACH5B,QAAQC,IAAI0B,EAAGE,OAAOT,IAAIU,OAC1BrB,EAAUY,cAAcM,EAAGE,OAAOT,IAAIU,UAGxCrB,EAAUY,cAAcZ,EAAUE,UAAUmB","sources":["../index.js","src/app.js"],"sourcesContent":["/**\n * share-url v1.2.0\n * @link https://github.com/noeldelgado/share-url\n * @license MIT\n */\n(function(root, factory) {\n  if (typeof exports === 'object') module.exports = factory(root);\n  else root.ShareUrl = factory(root);\n}(this, function factory(root) {\n  var ENDPOINTS = {\n    facebook    : 'https://www.facebook.com/sharer/sharer.php?',\n    twitter     : 'https://twitter.com/share?',\n    pinterest   : 'https://pinterest.com/pin/create/button/?',\n    reddit      : 'http://www.reddit.com/submit?',\n    linkedin    : 'https://linkedin.com/sharing/share-offsite/?',\n    whatsapp    : 'https://api.whatsapp.com/send?',\n    telegram    : 'https://t.me/share/url?',\n  };\n\n  return {\n    VERSION     : '1.2.0',\n    facebook    : facebook,\n    twitter     : twitter,\n    pinterest   : pinterest,\n    reddit      : reddit,\n    linkedin    : linkedin,\n    whatsapp    : whatsapp,\n    telegram    : telegram,\n    email       : email,\n  };\n\n  function _generateUrlParams(data) {\n    return Object.keys(data || {}).map(function(propertyName) {\n      return propertyName + '=' + encodeURIComponent(data[propertyName]);\n    }).join('&');\n  }\n\n  /* Compose the share on facebook url string.\n   * @argument data [Object] <required>\n   * @argument data.u [String] <required>\n   * @return url\n   */\n  function facebook(data) {\n    return ENDPOINTS.facebook + _generateUrlParams(data);\n  }\n\n  /* Compose the share on whatsapp url string\n   * @argument data [Object] <required>\n   * @argument data.text [String] <required>\n   * @return url\n   */\n  function whatsapp(data) {\n    return ENDPOINTS.whatsapp + _generateUrlParams(data);\n  }\n\n  /* Compose the share on telegram url string\n   * @argument data [Object] <required>\n   * @argument data.url [String] <required>\n   * @argument data.text [String] <optional>\n   * @return url\n   */\n  function telegram(data) {\n    return ENDPOINTS.telegram + _generateUrlParams(data);\n  }\n\n  /* Compose the share on twitter url string.\n   * @argument data [Object] <required>\n   * @argument data.text [String] <optional> Pre-populated text highlighted in the Tweet composer.\n   * @argument data.in_reply_to [String] <optional> Status ID string of a parent Tweet such as a Tweet from your account (if applicable).\n   * @argument data.url [String] <optional> URL included with the Tweet.\n   * @argument data.hashtags [String] <optional> A comma-separated list of hashtags to be appended to default Tweet text.\n   * @argument data.via [String] <optional> Attribute the source of a Tweet to a Twitter username.\n   * @argument data.related [String] <optional> A comma-separated list of accounts related to the content of the shared URI.\n   * @info https://dev.twitter.com/web/tweet-button/parameters\n   * @return url\n   */\n  function twitter(data) {\n    return ENDPOINTS.twitter + _generateUrlParams(data);\n  }\n\n  /* Compose the share on pinterest url string.\n   * @argument data [Object] <required>\n   * @argument data.url <required>\n   * @argument data.media <required>\n   * @argument data.description <required>\n   * @info https://developers.pinterest.com/pin_it/\n   * @return url\n   */\n  function pinterest(data) {\n    return ENDPOINTS.pinterest + _generateUrlParams(data);\n  }\n\n  /* Compose the submit to reddit url string.\n   * @argument data [Object] <required>\n   * @argument data.url <required>\n   * @argument data.title <optional>\n   * @argument data.text <optional>\n   * @info http://www.reddit.com/buttons/\n   * @return url\n   */\n  function reddit(data) {\n    return ENDPOINTS.reddit + _generateUrlParams(data);\n  }\n\n  /* Compose the share article on linkedin url string.\n   * @argument data [Object] <required>\n   * @argument data.url [String, 1024] <required> The url-encoded URL of the page that you wish to share.\n   * @info https://developer.linkedin.com/docs/share-on-linkedin\n   * @return url\n   */\n  function linkedin(data) {\n    return ENDPOINTS.linkedin + _generateUrlParams(data);\n  }\n\n  /* Compose the send email url string.\n   * @argument data [Object] <required>\n   * @argument to [String] <required>\n   * @argument subject [String] <optional>\n   * @argument cc [String] <optional>\n   * @argument bcc [String] <optional>\n   * @argument body [String] <optional>\n   * @info https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Email_links\n   * @return url\n   */\n  function email(data) {\n    var to = data.to;\n    delete data.to;\n    var params = _generateUrlParams(data);\n    return 'mailto:' + (params.length ? (to + '?' + params) : to);\n  }\n}));\n","import ShareUrl, { facebook, twitter, whatsapp, telegram, pinterest, reddit, linkedin } from '../../';\n\nconsole.log(ShareUrl);\nwindow.ShareUrl = ShareUrl;\n\nconst $ = document.querySelector.bind(document);\nconst internals = {};\n\ninternals.form = $('#demo-form-main-url');\ninternals.inputUrl = $('input[type=\"url\"]');\n\ninternals.outputs = [\n  {\n    el: $('[data-demo-output=\"facebook\"]'),\n    method: facebook,\n    options: (opts) => ({ u: opts.u })\n  },\n  {\n    el: $('[data-demo-output=\"whatsapp\"]'),\n    method: whatsapp,\n    options: (opts) => ({ text: opts.text })\n  },\n  {\n    el: $('[data-demo-output=\"twitter\"]'),\n    method: twitter,\n  },\n  {\n    el: $('[data-demo-output=\"telegram\"]'),\n    method: telegram,\n  },\n  {\n    el: $('[data-demo-output=\"pinterest\"]'),\n    method: pinterest,\n  },\n  {\n    el: $('[data-demo-output=\"reddit\"]'),\n    method: reddit,\n  },\n  {\n    el: $('[data-demo-output=\"linkedin\"]'),\n    method: linkedin,\n  }\n];\n\ninternals.content = (url) => `${url} <a href=\"${url}\" rel=\"noopener noreferrer\" target=\"_blank\">Test</a>`;\n\ninternals.updateOutputs = (val) => {\n  const u = url = text = val;\n\n  internals.outputs.forEach((o) => {\n    o.el.innerHTML = internals.content(\n      o.method(\n        o.options ? o.options({ u, url, text }) : { url }\n      )\n    );\n  });\n};\n\ninternals.form?.addEventListener('submit', (ev) => {\n  ev.preventDefault();\n  console.log(ev.target.url.value);\n  internals.updateOutputs(ev.target.url.value);\n});\n\ninternals.updateOutputs(internals.inputUrl?.value)\n"],"names":["$a039a1d03eee8e14$exports","root","ENDPOINTS","facebook","twitter","pinterest","reddit","linkedin","whatsapp","telegram","VERSION","email","_generateUrlParams","data","Object","keys","map","propertyName","encodeURIComponent","join","to","params","length","factory","console","log","$parcel$interopDefault","window","ShareUrl","$e73bf42412feb220$var$$","document","querySelector","bind","$e73bf42412feb220$var$internals","form","inputUrl","outputs","el","method","options","opts","u","text","content","url","updateOutputs","val","forEach","o","innerHTML","addEventListener","ev","preventDefault","target","value"],"version":3,"file":"index.f5f98ed6.js.map"}